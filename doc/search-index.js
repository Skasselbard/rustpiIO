var searchIndex = {};
searchIndex["rustpi_io"] = {"doc":"RustpiIO is a library to read and write to the SPI bus and the GPIO pins of a Raspberry Pi.","items":[[0,"gpio","rustpi_io","",null,null],[3,"GPIO","rustpi_io::gpio","A software representation for a GPIO pin of the raspberry pi.",null,null],[4,"GPIOMode","","",null,null],[13,"Read","","",0,null],[13,"Write","","",0,null],[4,"GPIOData","","",null,null],[13,"Low","","",1,null],[13,"High","","",1,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"gpiomode"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"gpiomode"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"gpiodata"}}],[11,"gpio_number","","Returns the configured pin of the GPIO struct.",2,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"current_mode","","Returns the configured mode of the GPIO struct.",2,{"inputs":[{"name":"self"}],"output":{"name":"gpiomode"}}],[11,"set_mode","","Changes the mode of the pin and writes the corresponding value to the fitting direction file",2,{"inputs":[{"name":"self"},{"name":"gpiomode"}],"output":{"name":"result"}}],[11,"new","","Initializes the gpio. Exports the pin with the /sys/class/gpio/export file and calls the set_mode() function with the given mode. Returns an Error if the gpio was already exported earlier (inside or outside of the application)",2,{"inputs":[{"name":"u8"},{"name":"gpiomode"}],"output":{"name":"result"}}],[11,"value","","Reads the current value of the pin in both Read and Write mode. Returns an Error if a value other than \"1\" or \"0\" is read",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set","","Sets the value of the gpio to HIGH or LOW Returns an Error if the GPIO::Mode is not Write",2,{"inputs":[{"name":"self"},{"name":"gpiodata"}],"output":{"name":"result"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"pi","rustpi_io","",null,null],[4,"RevisionStyle","rustpi_io::pi","",null,null],[13,"Old","","",3,null],[13,"New","","",3,null],[4,"MemorySize","","",null,null],[13,"MB256","","",4,null],[13,"MB512","","",4,null],[13,"MB1024","","",4,null],[4,"Manufacturer","","",null,null],[13,"SonyUK","","",5,null],[13,"Egoman","","",5,null],[13,"Embest","","",5,null],[13,"SonyJapan","","",5,null],[4,"Processor","","",null,null],[13,"BCM2835","","",6,null],[13,"BCM2836","","",6,null],[13,"BCM2837","","",6,null],[4,"Type","","",null,null],[13,"A","","",7,null],[13,"B","","",7,null],[13,"APlus","","",7,null],[13,"BPlus","","",7,null],[13,"B2","","",7,null],[13,"Alpha","","",7,null],[13,"CM1","","",7,null],[13,"B3","","",7,null],[13,"Zero","","",7,null],[13,"CM3","","",7,null],[13,"ZeroW","","",7,null],[5,"get_raspberry_info","","A function to extract information about the pi's hardware. The /proc/cpuinfo file is converted to progamatically usable data. The last element of the tuple is the revision of the raspberry model.",null,{"inputs":[],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"revisionstyle"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"revisionstyle"}],"output":{"name":"option"}}],[11,"from","","",3,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"memorysize"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"memorysize"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"manufacturer"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",5,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"processor"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"processor"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",6,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",7,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[0,"serial","rustpi_io","",null,null],[3,"SerialPi","rustpi_io::serial","Interface for the spi bus of the Raspberry Pi.",null,null],[12,"com_mode","","",8,null],[4,"Device","","Correspond to the SPI Chip Enable Pins on the raspberry pi.",null,null],[13,"CE0","","",9,null],[13,"CE1","","",9,null],[4,"Speed","","From https://www.raspberrypi.org/documentation/hardware/raspberrypi/spi/README.md#driver   Possible Speeds:      125.0 MHz      62.5 MHz      31.2 MHz      15.6 MHz      7.8 MHz      3.9 MHz      1953 kHz      976 kHz      488 kHz      244 kHz      122 kHz      61 kHz      30.5 kHz      15.2 kHz      7629 Hz  ",null,null],[13,"Mhz125_0","","",10,null],[13,"Mhz62_5","","",10,null],[13,"Mhz31_2","","",10,null],[13,"Mhz15_6","","",10,null],[13,"Mhz7_8","","",10,null],[13,"Mhz3_9","","",10,null],[13,"Khz1953","","",10,null],[13,"Khz976","","",10,null],[13,"Khz488","","",10,null],[13,"Khz244","","",10,null],[13,"Khz122","","",10,null],[13,"Khz61","","",10,null],[13,"Khz30_5","","",10,null],[13,"Khz15_2","","",10,null],[13,"Hz7629","","",10,null],[4,"SpiMode","","The most common spi modes regulating the clock phase and polarity.   Mode 0 seems to be the most used one and is set as default.   See https://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus#Clock_polarity_and_phase for an explanation ",null,null],[13,"Mode0","","",11,null],[13,"Mode1","","",11,null],[13,"Mode2","","",11,null],[13,"Mode3","","",11,null],[4,"ComMode","","",null,null],[13,"FullDuplex","","",12,null],[13,"HalfDuplex","","",12,null],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"device"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"speed"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"spimode"}],"output":{"name":"bool"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"commode"}],"output":{"name":"bool"}}],[11,"default","","ComMode::FullDuplex ",12,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Calls `with_capacity` with a buffer size of 1000 bytes.",8,{"inputs":[{"name":"device"},{"name":"speed"},{"name":"spimode"},{"name":"commode"}],"output":{"name":"result"}}],[11,"with_capacity","","Creates a serial wrapper for the raspberry pi. Also sets the buffers capacity.",8,{"inputs":[{"name":"device"},{"name":"speed"},{"name":"spimode"},{"name":"commode"},{"name":"usize"}],"output":{"name":"result"}}],[11,"buffer_capacity","","Returns the current capacity of the internal buffer. To change it call `try_shrink_to`. Maybe you have to `consume` or `read` some bytes of the buffer first.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"try_shrink_to","","Shrinks the internal buffer to fit its length. If the new capacity is les then the desired, the capacity is extended to match the desired. Already read bytes are not dropped. To do that call `consume`. The actual capacity might be greater than the desired.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"read","","Fills buf with the bytes from the internal buffer. If buf.len() is greater then the buffered byte count, the serial device is read until buf is filled.",8,null],[11,"fill_buf","","Does nothing if [`ComMode`] is not [`ComMode::FullDuplex`] and returns the internal buffer as slice.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","Does nothing if [`ComMode`] is not [`ComMode::FullDuplex`].",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write","","Calls write in the spi device if [`ComMode`] is [`ComMode::HalfDuplex`].",8,null],[11,"flush","","Does nothing if [`ComMode`] is not [`ComMode::HalfDuplex`].",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[4,"GPIOMode"],[4,"GPIOData"],[3,"GPIO"],[4,"RevisionStyle"],[4,"MemorySize"],[4,"Manufacturer"],[4,"Processor"],[4,"Type"],[3,"SerialPi"],[4,"Device"],[4,"Speed"],[4,"SpiMode"],[4,"ComMode"]]};
initSearch(searchIndex);
